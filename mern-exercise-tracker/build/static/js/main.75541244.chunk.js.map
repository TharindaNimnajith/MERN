{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","path","exact","component","ExercisesList","EditExercise","CreateExercise","UsersList","EditUser","CreateUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kgBAiCeA,MAhBf,WACC,OACO,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,6BAEA,kBAAC,IAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWC,MAC1C,kBAAC,IAAD,CAAOH,KAAK,qBAAqBC,OAAK,EAACC,UAAWE,MAClD,kBAAC,IAAD,CAAOJ,KAAK,mBAAmBC,OAAK,EAACC,UAAWG,MAChD,kBAAC,IAAD,CAAOL,KAAK,SAASC,OAAK,EAACC,UAAWI,MACtC,kBAAC,IAAD,CAAON,KAAK,iBAAiBC,OAAK,EAACC,UAAWK,MAC9C,kBAAC,IAAD,CAAOP,KAAK,eAAeC,OAAK,EAACC,UAAWM,QCdpCC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCRRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.75541244.chunk.js","sourcesContent":["/* jshint esversion: 6 */\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';  // import react router for easy routing\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";  // import bootstrap for styling\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\n\r\n// import components\r\nimport Navbar from \"./components/navbar.component\";\r\nimport ExercisesList from \"./components/exercises-list.component\";\r\nimport EditExercise from \"./components/edit-exercise.component\";\r\nimport CreateExercise from \"./components/create-exercise.component\";\r\nimport UsersList from \"./components/users-list.component\";\r\nimport EditUser from \"./components/edit-user.component\";\r\nimport CreateUser from \"./components/create-user.component\";\r\n\r\nfunction App() {\r\n\treturn (\r\n        <Router>\r\n            <Navbar />\r\n            <br />\r\n\r\n            <Route path=\"/exercises\" exact component={ExercisesList} />\r\n            <Route path=\"/edit_exercise/:id\" exact component={EditExercise} />\r\n            <Route path=\"/create_exercise\" exact component={CreateExercise} />\r\n            <Route path=\"/users\" exact component={UsersList} />\r\n            <Route path=\"/edit_user/:id\" exact component={EditUser} />\r\n            <Route path=\"/create_user\" exact component={CreateUser} />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n/* jshint esversion: 6 */\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","/* jshint esversion: 6 */\r\n\r\n// loading React and ReactDOM\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';  // loading external css file\r\n\r\nimport App from './App';  // frontend react app is going to be created in the App.js file\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));  // render the app and load it to the root element\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}